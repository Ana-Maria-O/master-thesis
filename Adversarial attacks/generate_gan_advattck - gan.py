from tabgan.sampler import GANGenerator
import pandas as pd

# training_num = 552363
training_num = 801554
# test_num = 2000000
test_num = 2902488

# Generate a set of 2000 malicious and benign examples
def adversarial_examples(features=False) -> tuple[pd.DataFrame, pd.DataFrame]:
    if features:
        # For running GAN on the features
        mawi_full = pd.read_csv("mawi_features", sep=" ", header=None, names=["Feature " + str(x + 1) for x in range(100)]) # Fill in the path of the csv file with the features corresponding to the original packets 
        labels = pd.read_csv("labeled_mawi_unfiltered.csv").loc[:, ["Label"]] # Fill in the path of the csv file with the labeled original packets

        # Add the labels to the features dataframe
        mawi_full = mawi_full.join(labels)
    else:
        # For running GAN on the packets
        mawi_full = pd.read_csv("labeled_mawi_unfiltered.csv") # Fill in the path of the csv file with the labeled original packets

    # Get only the malicious samples
    mawi_mal = mawi_full[mawi_full["Label"] == 1]
    mawi_mal = mawi_mal.sample(2000)

    # Get only the benign samples
    mawi_ben = mawi_full[mawi_full["Label"] == 0]
    mawi_ben = mawi_ben.sample(2000)

    return (mawi_mal, mawi_ben)

# Separate the malicious and benign packets 
malicious_examples, benign_examples = adversarial_examples()

malicious_examples.reset_index(inplace=True, drop=True)
benign_examples.reset_index(inplace=True, drop=True)

# Create a target dataframe with labels 0 that has the same number of rows as the malicious packets dataframe
targets = pd.DataFrame(0, index=range(malicious_examples.shape[0]), columns=["Label"])

# Drop the label columns because we don't want the labels to be generated by GAN
malicious_examples.drop(columns="Label", inplace=True)
benign_examples.drop(columns="Label", inplace=True)

# Fill empty cells in the columns based on the type of the column
for column in malicious_examples.columns:
    if malicious_examples[column].dtype == "float64" or malicious_examples[column].dtype == "int64":
        malicious_examples[column] = malicious_examples[column].fillna(0)
        benign_examples[column] = benign_examples[column].fillna(0)
    else:
        malicious_examples[column] = malicious_examples[column].fillna("")
        benign_examples[column] = benign_examples[column].fillna("")

# Categorical columns in the datasets
# cat_cols = ["eth.src", "eth.dst", "ip.src", "ip.dst",	"tcp.srcport", "tcp.dstport", "udp.srcport", "udp.dstport", 
#             "icmp.type", "icmp.code", "arp.opcode", "arp.src.hw_mac", "arp.src.proto_ipv4", "arp.dst.hw_mac", 
#             "arp.dst.proto_ipv4", "ipv6.src", "ipv6.dst"] # For GAN on packets
cat_cols = None # For GAN on features

generated_data, generated_target = GANGenerator(cat_cols=cat_cols).generate_data_pipe(
    malicious_examples, targets, benign_examples, use_adversarial=False)

generated_data.to_csv("ganf_adversarial_examples_features.csv", index=False)